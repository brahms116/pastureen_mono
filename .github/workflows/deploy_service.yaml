name: Deploy Services

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: environment
      service:
        required: true
        type: choice
        options:
          - everything
          - auth_service
          - blog_skeleton
          - design_system
          - reverse_proxy
          - static_assets
          - publisher
          - librarian
          - blog_htmx

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ENV: ${{ inputs.environment }}
  ENV_VARS_JSON: ${{ toJSON(secrets) }}

jobs:
  deploy_auth_service:
    if: inputs.service == 'auth_service' || inputs.service == 'everything'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup envs
        run: echo "$ENV_VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - name: Deploy auth service
        run: cd rust/auth_service && ./deploy.sh $ENV

  deploy_reverse_proxy:
    runs-on: ubuntu-latest
    if: inputs.service == 'reverse_proxy' || inputs.service == 'everything'
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup envs
        run: echo "$ENV_VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - name: Deploy reverse proxy
        run: cd rust/reverse_proxy && ./deploy.sh $ENV

  deploy_publisher:
    runs-on: ubuntu-latest
    if: inputs.service == 'publisher' || inputs.service == 'everything'
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup envs
        run: echo "$ENV_VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - name: Deploy publisher
        run: cd rust/publisher && ./deploy.sh $ENV

  deploy_blog_htmx:
    runs-on: ubuntu-latest
    if: inputs.service == 'blog_htmx' || inputs.service == 'everything'
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup envs
        run: echo "$ENV_VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - name: Deploy blog_htmx
        run: cd rust/blog_htmx && ./deploy.sh $ENV

  deploy_librarian:
    runs-on: ubuntu-latest
    if: inputs.service == 'librarian' || inputs.service == 'everything'
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup envs
        run: echo "$ENV_VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - name: Deploy Librarian
        run: cd golang/librarian && ./deploy.sh $ENV

  deploy_static_assets:
    runs-on: ubuntu-latest
    if: inputs.service == 'static_assets' || inputs.service == 'everything'
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Deploy static assets
        run: cd static && ./deploy.sh $ENV

  deploy_blog_skeleton:
    runs-on: ubuntu-latest
    if: inputs.service == 'blog_skeleton' || inputs.service == 'everything'
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup envs
        run: echo "$ENV_VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - name: Deploy blog skeleton
        run: cd rust/blog_skeleton && ./deploy.sh $ENV
