// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pastureen/librarian/ent/dbtag"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// DbTag is the model entity for the DbTag schema.
type DbTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbTagQuery when eager-loading is set.
	Edges        DbTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DbTagEdges holds the relations/edges for other nodes in the graph.
type DbTagEdges struct {
	// Links holds the value of the links edge.
	Links []*DbLink `json:"links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LinksOrErr returns the Links value or an error if the edge
// was not loaded in eager-loading.
func (e DbTagEdges) LinksOrErr() ([]*DbLink, error) {
	if e.loadedTypes[0] {
		return e.Links, nil
	}
	return nil, &NotLoadedError{edge: "links"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbtag.FieldName:
			values[i] = new(sql.NullString)
		case dbtag.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbTag fields.
func (dt *DbTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbtag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dt.ID = *value
			}
		case dbtag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dt.Name = value.String
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DbTag.
// This includes values selected through modifiers, order, etc.
func (dt *DbTag) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// QueryLinks queries the "links" edge of the DbTag entity.
func (dt *DbTag) QueryLinks() *DbLinkQuery {
	return NewDbTagClient(dt.config).QueryLinks(dt)
}

// Update returns a builder for updating this DbTag.
// Note that you need to call DbTag.Unwrap() before calling this method if this DbTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DbTag) Update() *DbTagUpdateOne {
	return NewDbTagClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DbTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DbTag) Unwrap() *DbTag {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbTag is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DbTag) String() string {
	var builder strings.Builder
	builder.WriteString("DbTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("name=")
	builder.WriteString(dt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// DbTags is a parsable slice of DbTag.
type DbTags []*DbTag
