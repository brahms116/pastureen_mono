// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pastureen/librarian/ent/dblink"
	"pastureen/librarian/ent/dbtag"
	"pastureen/librarian/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDbLink = "DbLink"
	TypeDbTag  = "DbTag"
)

// DbLinkMutation represents an operation that mutates the DbLink nodes in the graph.
type DbLinkMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	title         *string
	date          *time.Time
	url           *string
	subtitle      *string
	description   *string
	image_url     *string
	image_alt     *string
	clearedFields map[string]struct{}
	tags          map[uuid.UUID]struct{}
	removedtags   map[uuid.UUID]struct{}
	clearedtags   bool
	done          bool
	oldValue      func(context.Context) (*DbLink, error)
	predicates    []predicate.DbLink
}

var _ ent.Mutation = (*DbLinkMutation)(nil)

// dblinkOption allows management of the mutation configuration using functional options.
type dblinkOption func(*DbLinkMutation)

// newDbLinkMutation creates new mutation for the DbLink entity.
func newDbLinkMutation(c config, op Op, opts ...dblinkOption) *DbLinkMutation {
	m := &DbLinkMutation{
		config:        c,
		op:            op,
		typ:           TypeDbLink,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDbLinkID sets the ID field of the mutation.
func withDbLinkID(id uuid.UUID) dblinkOption {
	return func(m *DbLinkMutation) {
		var (
			err   error
			once  sync.Once
			value *DbLink
		)
		m.oldValue = func(ctx context.Context) (*DbLink, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DbLink.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDbLink sets the old DbLink of the mutation.
func withDbLink(node *DbLink) dblinkOption {
	return func(m *DbLinkMutation) {
		m.oldValue = func(context.Context) (*DbLink, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DbLinkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DbLinkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DbLink entities.
func (m *DbLinkMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DbLinkMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DbLinkMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DbLink.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *DbLinkMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *DbLinkMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *DbLinkMutation) ResetTitle() {
	m.title = nil
}

// SetDate sets the "date" field.
func (m *DbLinkMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DbLinkMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DbLinkMutation) ResetDate() {
	m.date = nil
}

// SetURL sets the "url" field.
func (m *DbLinkMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *DbLinkMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *DbLinkMutation) ResetURL() {
	m.url = nil
}

// SetSubtitle sets the "subtitle" field.
func (m *DbLinkMutation) SetSubtitle(s string) {
	m.subtitle = &s
}

// Subtitle returns the value of the "subtitle" field in the mutation.
func (m *DbLinkMutation) Subtitle() (r string, exists bool) {
	v := m.subtitle
	if v == nil {
		return
	}
	return *v, true
}

// OldSubtitle returns the old "subtitle" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldSubtitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubtitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubtitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubtitle: %w", err)
	}
	return oldValue.Subtitle, nil
}

// ResetSubtitle resets all changes to the "subtitle" field.
func (m *DbLinkMutation) ResetSubtitle() {
	m.subtitle = nil
}

// SetDescription sets the "description" field.
func (m *DbLinkMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DbLinkMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *DbLinkMutation) ResetDescription() {
	m.description = nil
}

// SetImageURL sets the "image_url" field.
func (m *DbLinkMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *DbLinkMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *DbLinkMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[dblink.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *DbLinkMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[dblink.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *DbLinkMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, dblink.FieldImageURL)
}

// SetImageAlt sets the "image_alt" field.
func (m *DbLinkMutation) SetImageAlt(s string) {
	m.image_alt = &s
}

// ImageAlt returns the value of the "image_alt" field in the mutation.
func (m *DbLinkMutation) ImageAlt() (r string, exists bool) {
	v := m.image_alt
	if v == nil {
		return
	}
	return *v, true
}

// OldImageAlt returns the old "image_alt" field's value of the DbLink entity.
// If the DbLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbLinkMutation) OldImageAlt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageAlt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageAlt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageAlt: %w", err)
	}
	return oldValue.ImageAlt, nil
}

// ClearImageAlt clears the value of the "image_alt" field.
func (m *DbLinkMutation) ClearImageAlt() {
	m.image_alt = nil
	m.clearedFields[dblink.FieldImageAlt] = struct{}{}
}

// ImageAltCleared returns if the "image_alt" field was cleared in this mutation.
func (m *DbLinkMutation) ImageAltCleared() bool {
	_, ok := m.clearedFields[dblink.FieldImageAlt]
	return ok
}

// ResetImageAlt resets all changes to the "image_alt" field.
func (m *DbLinkMutation) ResetImageAlt() {
	m.image_alt = nil
	delete(m.clearedFields, dblink.FieldImageAlt)
}

// AddTagIDs adds the "tags" edge to the DbTag entity by ids.
func (m *DbLinkMutation) AddTagIDs(ids ...uuid.UUID) {
	if m.tags == nil {
		m.tags = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the DbTag entity.
func (m *DbLinkMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the DbTag entity was cleared.
func (m *DbLinkMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the DbTag entity by IDs.
func (m *DbLinkMutation) RemoveTagIDs(ids ...uuid.UUID) {
	if m.removedtags == nil {
		m.removedtags = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the DbTag entity.
func (m *DbLinkMutation) RemovedTagsIDs() (ids []uuid.UUID) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *DbLinkMutation) TagsIDs() (ids []uuid.UUID) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *DbLinkMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// Where appends a list predicates to the DbLinkMutation builder.
func (m *DbLinkMutation) Where(ps ...predicate.DbLink) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DbLinkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DbLinkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DbLink, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DbLinkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DbLinkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DbLink).
func (m *DbLinkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DbLinkMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.title != nil {
		fields = append(fields, dblink.FieldTitle)
	}
	if m.date != nil {
		fields = append(fields, dblink.FieldDate)
	}
	if m.url != nil {
		fields = append(fields, dblink.FieldURL)
	}
	if m.subtitle != nil {
		fields = append(fields, dblink.FieldSubtitle)
	}
	if m.description != nil {
		fields = append(fields, dblink.FieldDescription)
	}
	if m.image_url != nil {
		fields = append(fields, dblink.FieldImageURL)
	}
	if m.image_alt != nil {
		fields = append(fields, dblink.FieldImageAlt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DbLinkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dblink.FieldTitle:
		return m.Title()
	case dblink.FieldDate:
		return m.Date()
	case dblink.FieldURL:
		return m.URL()
	case dblink.FieldSubtitle:
		return m.Subtitle()
	case dblink.FieldDescription:
		return m.Description()
	case dblink.FieldImageURL:
		return m.ImageURL()
	case dblink.FieldImageAlt:
		return m.ImageAlt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DbLinkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dblink.FieldTitle:
		return m.OldTitle(ctx)
	case dblink.FieldDate:
		return m.OldDate(ctx)
	case dblink.FieldURL:
		return m.OldURL(ctx)
	case dblink.FieldSubtitle:
		return m.OldSubtitle(ctx)
	case dblink.FieldDescription:
		return m.OldDescription(ctx)
	case dblink.FieldImageURL:
		return m.OldImageURL(ctx)
	case dblink.FieldImageAlt:
		return m.OldImageAlt(ctx)
	}
	return nil, fmt.Errorf("unknown DbLink field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DbLinkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dblink.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case dblink.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case dblink.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case dblink.FieldSubtitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubtitle(v)
		return nil
	case dblink.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case dblink.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case dblink.FieldImageAlt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageAlt(v)
		return nil
	}
	return fmt.Errorf("unknown DbLink field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DbLinkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DbLinkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DbLinkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DbLink numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DbLinkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dblink.FieldImageURL) {
		fields = append(fields, dblink.FieldImageURL)
	}
	if m.FieldCleared(dblink.FieldImageAlt) {
		fields = append(fields, dblink.FieldImageAlt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DbLinkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DbLinkMutation) ClearField(name string) error {
	switch name {
	case dblink.FieldImageURL:
		m.ClearImageURL()
		return nil
	case dblink.FieldImageAlt:
		m.ClearImageAlt()
		return nil
	}
	return fmt.Errorf("unknown DbLink nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DbLinkMutation) ResetField(name string) error {
	switch name {
	case dblink.FieldTitle:
		m.ResetTitle()
		return nil
	case dblink.FieldDate:
		m.ResetDate()
		return nil
	case dblink.FieldURL:
		m.ResetURL()
		return nil
	case dblink.FieldSubtitle:
		m.ResetSubtitle()
		return nil
	case dblink.FieldDescription:
		m.ResetDescription()
		return nil
	case dblink.FieldImageURL:
		m.ResetImageURL()
		return nil
	case dblink.FieldImageAlt:
		m.ResetImageAlt()
		return nil
	}
	return fmt.Errorf("unknown DbLink field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DbLinkMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tags != nil {
		edges = append(edges, dblink.EdgeTags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DbLinkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dblink.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DbLinkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtags != nil {
		edges = append(edges, dblink.EdgeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DbLinkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dblink.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DbLinkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtags {
		edges = append(edges, dblink.EdgeTags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DbLinkMutation) EdgeCleared(name string) bool {
	switch name {
	case dblink.EdgeTags:
		return m.clearedtags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DbLinkMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DbLink unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DbLinkMutation) ResetEdge(name string) error {
	switch name {
	case dblink.EdgeTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown DbLink edge %s", name)
}

// DbTagMutation represents an operation that mutates the DbTag nodes in the graph.
type DbTagMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	links         map[uuid.UUID]struct{}
	removedlinks  map[uuid.UUID]struct{}
	clearedlinks  bool
	done          bool
	oldValue      func(context.Context) (*DbTag, error)
	predicates    []predicate.DbTag
}

var _ ent.Mutation = (*DbTagMutation)(nil)

// dbtagOption allows management of the mutation configuration using functional options.
type dbtagOption func(*DbTagMutation)

// newDbTagMutation creates new mutation for the DbTag entity.
func newDbTagMutation(c config, op Op, opts ...dbtagOption) *DbTagMutation {
	m := &DbTagMutation{
		config:        c,
		op:            op,
		typ:           TypeDbTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDbTagID sets the ID field of the mutation.
func withDbTagID(id uuid.UUID) dbtagOption {
	return func(m *DbTagMutation) {
		var (
			err   error
			once  sync.Once
			value *DbTag
		)
		m.oldValue = func(ctx context.Context) (*DbTag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DbTag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDbTag sets the old DbTag of the mutation.
func withDbTag(node *DbTag) dbtagOption {
	return func(m *DbTagMutation) {
		m.oldValue = func(context.Context) (*DbTag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DbTagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DbTagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DbTag entities.
func (m *DbTagMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DbTagMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DbTagMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DbTag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DbTagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DbTagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DbTag entity.
// If the DbTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbTagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DbTagMutation) ResetName() {
	m.name = nil
}

// AddLinkIDs adds the "links" edge to the DbLink entity by ids.
func (m *DbTagMutation) AddLinkIDs(ids ...uuid.UUID) {
	if m.links == nil {
		m.links = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.links[ids[i]] = struct{}{}
	}
}

// ClearLinks clears the "links" edge to the DbLink entity.
func (m *DbTagMutation) ClearLinks() {
	m.clearedlinks = true
}

// LinksCleared reports if the "links" edge to the DbLink entity was cleared.
func (m *DbTagMutation) LinksCleared() bool {
	return m.clearedlinks
}

// RemoveLinkIDs removes the "links" edge to the DbLink entity by IDs.
func (m *DbTagMutation) RemoveLinkIDs(ids ...uuid.UUID) {
	if m.removedlinks == nil {
		m.removedlinks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.links, ids[i])
		m.removedlinks[ids[i]] = struct{}{}
	}
}

// RemovedLinks returns the removed IDs of the "links" edge to the DbLink entity.
func (m *DbTagMutation) RemovedLinksIDs() (ids []uuid.UUID) {
	for id := range m.removedlinks {
		ids = append(ids, id)
	}
	return
}

// LinksIDs returns the "links" edge IDs in the mutation.
func (m *DbTagMutation) LinksIDs() (ids []uuid.UUID) {
	for id := range m.links {
		ids = append(ids, id)
	}
	return
}

// ResetLinks resets all changes to the "links" edge.
func (m *DbTagMutation) ResetLinks() {
	m.links = nil
	m.clearedlinks = false
	m.removedlinks = nil
}

// Where appends a list predicates to the DbTagMutation builder.
func (m *DbTagMutation) Where(ps ...predicate.DbTag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DbTagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DbTagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DbTag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DbTagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DbTagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DbTag).
func (m *DbTagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DbTagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, dbtag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DbTagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dbtag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DbTagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dbtag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown DbTag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DbTagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dbtag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown DbTag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DbTagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DbTagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DbTagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DbTag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DbTagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DbTagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DbTagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DbTag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DbTagMutation) ResetField(name string) error {
	switch name {
	case dbtag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown DbTag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DbTagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.links != nil {
		edges = append(edges, dbtag.EdgeLinks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DbTagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dbtag.EdgeLinks:
		ids := make([]ent.Value, 0, len(m.links))
		for id := range m.links {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DbTagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlinks != nil {
		edges = append(edges, dbtag.EdgeLinks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DbTagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dbtag.EdgeLinks:
		ids := make([]ent.Value, 0, len(m.removedlinks))
		for id := range m.removedlinks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DbTagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlinks {
		edges = append(edges, dbtag.EdgeLinks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DbTagMutation) EdgeCleared(name string) bool {
	switch name {
	case dbtag.EdgeLinks:
		return m.clearedlinks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DbTagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DbTag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DbTagMutation) ResetEdge(name string) error {
	switch name {
	case dbtag.EdgeLinks:
		m.ResetLinks()
		return nil
	}
	return fmt.Errorf("unknown DbTag edge %s", name)
}
