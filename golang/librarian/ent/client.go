// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"pastureen/librarian/ent/migrate"

	"pastureen/librarian/ent/dblink"
	"pastureen/librarian/ent/dbtag"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DbLink is the client for interacting with the DbLink builders.
	DbLink *DbLinkClient
	// DbTag is the client for interacting with the DbTag builders.
	DbTag *DbTagClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DbLink = NewDbLinkClient(c.config)
	c.DbTag = NewDbTagClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		DbLink: NewDbLinkClient(cfg),
		DbTag:  NewDbTagClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		DbLink: NewDbLinkClient(cfg),
		DbTag:  NewDbTagClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DbLink.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DbLink.Use(hooks...)
	c.DbTag.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DbLink.Intercept(interceptors...)
	c.DbTag.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DbLinkMutation:
		return c.DbLink.mutate(ctx, m)
	case *DbTagMutation:
		return c.DbTag.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DbLinkClient is a client for the DbLink schema.
type DbLinkClient struct {
	config
}

// NewDbLinkClient returns a client for the DbLink from the given config.
func NewDbLinkClient(c config) *DbLinkClient {
	return &DbLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dblink.Hooks(f(g(h())))`.
func (c *DbLinkClient) Use(hooks ...Hook) {
	c.hooks.DbLink = append(c.hooks.DbLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dblink.Intercept(f(g(h())))`.
func (c *DbLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.DbLink = append(c.inters.DbLink, interceptors...)
}

// Create returns a builder for creating a DbLink entity.
func (c *DbLinkClient) Create() *DbLinkCreate {
	mutation := newDbLinkMutation(c.config, OpCreate)
	return &DbLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbLink entities.
func (c *DbLinkClient) CreateBulk(builders ...*DbLinkCreate) *DbLinkCreateBulk {
	return &DbLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DbLinkClient) MapCreateBulk(slice any, setFunc func(*DbLinkCreate, int)) *DbLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DbLinkCreateBulk{err: fmt.Errorf("calling to DbLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DbLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DbLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbLink.
func (c *DbLinkClient) Update() *DbLinkUpdate {
	mutation := newDbLinkMutation(c.config, OpUpdate)
	return &DbLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbLinkClient) UpdateOne(dl *DbLink) *DbLinkUpdateOne {
	mutation := newDbLinkMutation(c.config, OpUpdateOne, withDbLink(dl))
	return &DbLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbLinkClient) UpdateOneID(id uuid.UUID) *DbLinkUpdateOne {
	mutation := newDbLinkMutation(c.config, OpUpdateOne, withDbLinkID(id))
	return &DbLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbLink.
func (c *DbLinkClient) Delete() *DbLinkDelete {
	mutation := newDbLinkMutation(c.config, OpDelete)
	return &DbLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbLinkClient) DeleteOne(dl *DbLink) *DbLinkDeleteOne {
	return c.DeleteOneID(dl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DbLinkClient) DeleteOneID(id uuid.UUID) *DbLinkDeleteOne {
	builder := c.Delete().Where(dblink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbLinkDeleteOne{builder}
}

// Query returns a query builder for DbLink.
func (c *DbLinkClient) Query() *DbLinkQuery {
	return &DbLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDbLink},
		inters: c.Interceptors(),
	}
}

// Get returns a DbLink entity by its id.
func (c *DbLinkClient) Get(ctx context.Context, id uuid.UUID) (*DbLink, error) {
	return c.Query().Where(dblink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbLinkClient) GetX(ctx context.Context, id uuid.UUID) *DbLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a DbLink.
func (c *DbLinkClient) QueryTags(dl *DbLink) *DbTagQuery {
	query := (&DbTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dblink.Table, dblink.FieldID, id),
			sqlgraph.To(dbtag.Table, dbtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dblink.TagsTable, dblink.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbLinkClient) Hooks() []Hook {
	return c.hooks.DbLink
}

// Interceptors returns the client interceptors.
func (c *DbLinkClient) Interceptors() []Interceptor {
	return c.inters.DbLink
}

func (c *DbLinkClient) mutate(ctx context.Context, m *DbLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DbLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DbLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DbLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DbLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DbLink mutation op: %q", m.Op())
	}
}

// DbTagClient is a client for the DbTag schema.
type DbTagClient struct {
	config
}

// NewDbTagClient returns a client for the DbTag from the given config.
func NewDbTagClient(c config) *DbTagClient {
	return &DbTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbtag.Hooks(f(g(h())))`.
func (c *DbTagClient) Use(hooks ...Hook) {
	c.hooks.DbTag = append(c.hooks.DbTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dbtag.Intercept(f(g(h())))`.
func (c *DbTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.DbTag = append(c.inters.DbTag, interceptors...)
}

// Create returns a builder for creating a DbTag entity.
func (c *DbTagClient) Create() *DbTagCreate {
	mutation := newDbTagMutation(c.config, OpCreate)
	return &DbTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbTag entities.
func (c *DbTagClient) CreateBulk(builders ...*DbTagCreate) *DbTagCreateBulk {
	return &DbTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DbTagClient) MapCreateBulk(slice any, setFunc func(*DbTagCreate, int)) *DbTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DbTagCreateBulk{err: fmt.Errorf("calling to DbTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DbTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DbTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbTag.
func (c *DbTagClient) Update() *DbTagUpdate {
	mutation := newDbTagMutation(c.config, OpUpdate)
	return &DbTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbTagClient) UpdateOne(dt *DbTag) *DbTagUpdateOne {
	mutation := newDbTagMutation(c.config, OpUpdateOne, withDbTag(dt))
	return &DbTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbTagClient) UpdateOneID(id uuid.UUID) *DbTagUpdateOne {
	mutation := newDbTagMutation(c.config, OpUpdateOne, withDbTagID(id))
	return &DbTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbTag.
func (c *DbTagClient) Delete() *DbTagDelete {
	mutation := newDbTagMutation(c.config, OpDelete)
	return &DbTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbTagClient) DeleteOne(dt *DbTag) *DbTagDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DbTagClient) DeleteOneID(id uuid.UUID) *DbTagDeleteOne {
	builder := c.Delete().Where(dbtag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbTagDeleteOne{builder}
}

// Query returns a query builder for DbTag.
func (c *DbTagClient) Query() *DbTagQuery {
	return &DbTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDbTag},
		inters: c.Interceptors(),
	}
}

// Get returns a DbTag entity by its id.
func (c *DbTagClient) Get(ctx context.Context, id uuid.UUID) (*DbTag, error) {
	return c.Query().Where(dbtag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbTagClient) GetX(ctx context.Context, id uuid.UUID) *DbTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLinks queries the links edge of a DbTag.
func (c *DbTagClient) QueryLinks(dt *DbTag) *DbLinkQuery {
	query := (&DbLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtag.Table, dbtag.FieldID, id),
			sqlgraph.To(dblink.Table, dblink.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbtag.LinksTable, dbtag.LinksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbTagClient) Hooks() []Hook {
	return c.hooks.DbTag
}

// Interceptors returns the client interceptors.
func (c *DbTagClient) Interceptors() []Interceptor {
	return c.inters.DbTag
}

func (c *DbTagClient) mutate(ctx context.Context, m *DbTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DbTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DbTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DbTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DbTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DbTag mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DbLink, DbTag []ent.Hook
	}
	inters struct {
		DbLink, DbTag []ent.Interceptor
	}
)
