// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"pastureen/librarian/ent/dblink"
	"pastureen/librarian/ent/dbtag"
	"pastureen/librarian/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DbTagQuery is the builder for querying DbTag entities.
type DbTagQuery struct {
	config
	ctx        *QueryContext
	order      []dbtag.OrderOption
	inters     []Interceptor
	predicates []predicate.DbTag
	withLinks  *DbLinkQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DbTagQuery builder.
func (dtq *DbTagQuery) Where(ps ...predicate.DbTag) *DbTagQuery {
	dtq.predicates = append(dtq.predicates, ps...)
	return dtq
}

// Limit the number of records to be returned by this query.
func (dtq *DbTagQuery) Limit(limit int) *DbTagQuery {
	dtq.ctx.Limit = &limit
	return dtq
}

// Offset to start from.
func (dtq *DbTagQuery) Offset(offset int) *DbTagQuery {
	dtq.ctx.Offset = &offset
	return dtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dtq *DbTagQuery) Unique(unique bool) *DbTagQuery {
	dtq.ctx.Unique = &unique
	return dtq
}

// Order specifies how the records should be ordered.
func (dtq *DbTagQuery) Order(o ...dbtag.OrderOption) *DbTagQuery {
	dtq.order = append(dtq.order, o...)
	return dtq
}

// QueryLinks chains the current query on the "links" edge.
func (dtq *DbTagQuery) QueryLinks() *DbLinkQuery {
	query := (&DbLinkClient{config: dtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtag.Table, dbtag.FieldID, selector),
			sqlgraph.To(dblink.Table, dblink.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbtag.LinksTable, dbtag.LinksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DbTag entity from the query.
// Returns a *NotFoundError when no DbTag was found.
func (dtq *DbTagQuery) First(ctx context.Context) (*DbTag, error) {
	nodes, err := dtq.Limit(1).All(setContextOp(ctx, dtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dbtag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dtq *DbTagQuery) FirstX(ctx context.Context) *DbTag {
	node, err := dtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DbTag ID from the query.
// Returns a *NotFoundError when no DbTag ID was found.
func (dtq *DbTagQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dtq.Limit(1).IDs(setContextOp(ctx, dtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dbtag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dtq *DbTagQuery) FirstIDX(ctx context.Context) string {
	id, err := dtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DbTag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DbTag entity is found.
// Returns a *NotFoundError when no DbTag entities are found.
func (dtq *DbTagQuery) Only(ctx context.Context) (*DbTag, error) {
	nodes, err := dtq.Limit(2).All(setContextOp(ctx, dtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dbtag.Label}
	default:
		return nil, &NotSingularError{dbtag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dtq *DbTagQuery) OnlyX(ctx context.Context) *DbTag {
	node, err := dtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DbTag ID in the query.
// Returns a *NotSingularError when more than one DbTag ID is found.
// Returns a *NotFoundError when no entities are found.
func (dtq *DbTagQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dtq.Limit(2).IDs(setContextOp(ctx, dtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dbtag.Label}
	default:
		err = &NotSingularError{dbtag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dtq *DbTagQuery) OnlyIDX(ctx context.Context) string {
	id, err := dtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DbTags.
func (dtq *DbTagQuery) All(ctx context.Context) ([]*DbTag, error) {
	ctx = setContextOp(ctx, dtq.ctx, "All")
	if err := dtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DbTag, *DbTagQuery]()
	return withInterceptors[[]*DbTag](ctx, dtq, qr, dtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dtq *DbTagQuery) AllX(ctx context.Context) []*DbTag {
	nodes, err := dtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DbTag IDs.
func (dtq *DbTagQuery) IDs(ctx context.Context) (ids []string, err error) {
	if dtq.ctx.Unique == nil && dtq.path != nil {
		dtq.Unique(true)
	}
	ctx = setContextOp(ctx, dtq.ctx, "IDs")
	if err = dtq.Select(dbtag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dtq *DbTagQuery) IDsX(ctx context.Context) []string {
	ids, err := dtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dtq *DbTagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dtq.ctx, "Count")
	if err := dtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dtq, querierCount[*DbTagQuery](), dtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dtq *DbTagQuery) CountX(ctx context.Context) int {
	count, err := dtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dtq *DbTagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dtq.ctx, "Exist")
	switch _, err := dtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dtq *DbTagQuery) ExistX(ctx context.Context) bool {
	exist, err := dtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DbTagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dtq *DbTagQuery) Clone() *DbTagQuery {
	if dtq == nil {
		return nil
	}
	return &DbTagQuery{
		config:     dtq.config,
		ctx:        dtq.ctx.Clone(),
		order:      append([]dbtag.OrderOption{}, dtq.order...),
		inters:     append([]Interceptor{}, dtq.inters...),
		predicates: append([]predicate.DbTag{}, dtq.predicates...),
		withLinks:  dtq.withLinks.Clone(),
		// clone intermediate query.
		sql:  dtq.sql.Clone(),
		path: dtq.path,
	}
}

// WithLinks tells the query-builder to eager-load the nodes that are connected to
// the "links" edge. The optional arguments are used to configure the query builder of the edge.
func (dtq *DbTagQuery) WithLinks(opts ...func(*DbLinkQuery)) *DbTagQuery {
	query := (&DbLinkClient{config: dtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dtq.withLinks = query
	return dtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (dtq *DbTagQuery) GroupBy(field string, fields ...string) *DbTagGroupBy {
	dtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DbTagGroupBy{build: dtq}
	grbuild.flds = &dtq.ctx.Fields
	grbuild.label = dbtag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (dtq *DbTagQuery) Select(fields ...string) *DbTagSelect {
	dtq.ctx.Fields = append(dtq.ctx.Fields, fields...)
	sbuild := &DbTagSelect{DbTagQuery: dtq}
	sbuild.label = dbtag.Label
	sbuild.flds, sbuild.scan = &dtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DbTagSelect configured with the given aggregations.
func (dtq *DbTagQuery) Aggregate(fns ...AggregateFunc) *DbTagSelect {
	return dtq.Select().Aggregate(fns...)
}

func (dtq *DbTagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dtq); err != nil {
				return err
			}
		}
	}
	for _, f := range dtq.ctx.Fields {
		if !dbtag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dtq.path != nil {
		prev, err := dtq.path(ctx)
		if err != nil {
			return err
		}
		dtq.sql = prev
	}
	return nil
}

func (dtq *DbTagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DbTag, error) {
	var (
		nodes       = []*DbTag{}
		_spec       = dtq.querySpec()
		loadedTypes = [1]bool{
			dtq.withLinks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DbTag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DbTag{config: dtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dtq.withLinks; query != nil {
		if err := dtq.loadLinks(ctx, query, nodes,
			func(n *DbTag) { n.Edges.Links = []*DbLink{} },
			func(n *DbTag, e *DbLink) { n.Edges.Links = append(n.Edges.Links, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dtq *DbTagQuery) loadLinks(ctx context.Context, query *DbLinkQuery, nodes []*DbTag, init func(*DbTag), assign func(*DbTag, *DbLink)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*DbTag)
	nids := make(map[string]map[*DbTag]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(dbtag.LinksTable)
		s.Join(joinT).On(s.C(dblink.FieldID), joinT.C(dbtag.LinksPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(dbtag.LinksPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(dbtag.LinksPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*DbTag]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DbLink](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "links" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (dtq *DbTagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dtq.querySpec()
	_spec.Node.Columns = dtq.ctx.Fields
	if len(dtq.ctx.Fields) > 0 {
		_spec.Unique = dtq.ctx.Unique != nil && *dtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dtq.driver, _spec)
}

func (dtq *DbTagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(dbtag.Table, dbtag.Columns, sqlgraph.NewFieldSpec(dbtag.FieldID, field.TypeString))
	_spec.From = dtq.sql
	if unique := dtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dtq.path != nil {
		_spec.Unique = true
	}
	if fields := dtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbtag.FieldID)
		for i := range fields {
			if fields[i] != dbtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dtq *DbTagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dtq.driver.Dialect())
	t1 := builder.Table(dbtag.Table)
	columns := dtq.ctx.Fields
	if len(columns) == 0 {
		columns = dbtag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dtq.sql != nil {
		selector = dtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dtq.ctx.Unique != nil && *dtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dtq.predicates {
		p(selector)
	}
	for _, p := range dtq.order {
		p(selector)
	}
	if offset := dtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DbTagGroupBy is the group-by builder for DbTag entities.
type DbTagGroupBy struct {
	selector
	build *DbTagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dtgb *DbTagGroupBy) Aggregate(fns ...AggregateFunc) *DbTagGroupBy {
	dtgb.fns = append(dtgb.fns, fns...)
	return dtgb
}

// Scan applies the selector query and scans the result into the given value.
func (dtgb *DbTagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dtgb.build.ctx, "GroupBy")
	if err := dtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DbTagQuery, *DbTagGroupBy](ctx, dtgb.build, dtgb, dtgb.build.inters, v)
}

func (dtgb *DbTagGroupBy) sqlScan(ctx context.Context, root *DbTagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dtgb.fns))
	for _, fn := range dtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dtgb.flds)+len(dtgb.fns))
		for _, f := range *dtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DbTagSelect is the builder for selecting fields of DbTag entities.
type DbTagSelect struct {
	*DbTagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dts *DbTagSelect) Aggregate(fns ...AggregateFunc) *DbTagSelect {
	dts.fns = append(dts.fns, fns...)
	return dts
}

// Scan applies the selector query and scans the result into the given value.
func (dts *DbTagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dts.ctx, "Select")
	if err := dts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DbTagQuery, *DbTagSelect](ctx, dts.DbTagQuery, dts, dts.inters, v)
}

func (dts *DbTagSelect) sqlScan(ctx context.Context, root *DbTagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dts.fns))
	for _, fn := range dts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
