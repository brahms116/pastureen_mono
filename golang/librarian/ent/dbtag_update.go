// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pastureen/librarian/ent/dblink"
	"pastureen/librarian/ent/dbtag"
	"pastureen/librarian/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DbTagUpdate is the builder for updating DbTag entities.
type DbTagUpdate struct {
	config
	hooks    []Hook
	mutation *DbTagMutation
}

// Where appends a list predicates to the DbTagUpdate builder.
func (dtu *DbTagUpdate) Where(ps ...predicate.DbTag) *DbTagUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetName sets the "name" field.
func (dtu *DbTagUpdate) SetName(s string) *DbTagUpdate {
	dtu.mutation.SetName(s)
	return dtu
}

// AddLinkIDs adds the "links" edge to the DbLink entity by IDs.
func (dtu *DbTagUpdate) AddLinkIDs(ids ...uuid.UUID) *DbTagUpdate {
	dtu.mutation.AddLinkIDs(ids...)
	return dtu
}

// AddLinks adds the "links" edges to the DbLink entity.
func (dtu *DbTagUpdate) AddLinks(d ...*DbLink) *DbTagUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtu.AddLinkIDs(ids...)
}

// Mutation returns the DbTagMutation object of the builder.
func (dtu *DbTagUpdate) Mutation() *DbTagMutation {
	return dtu.mutation
}

// ClearLinks clears all "links" edges to the DbLink entity.
func (dtu *DbTagUpdate) ClearLinks() *DbTagUpdate {
	dtu.mutation.ClearLinks()
	return dtu
}

// RemoveLinkIDs removes the "links" edge to DbLink entities by IDs.
func (dtu *DbTagUpdate) RemoveLinkIDs(ids ...uuid.UUID) *DbTagUpdate {
	dtu.mutation.RemoveLinkIDs(ids...)
	return dtu
}

// RemoveLinks removes "links" edges to DbLink entities.
func (dtu *DbTagUpdate) RemoveLinks(d ...*DbLink) *DbTagUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtu.RemoveLinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DbTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DbTagUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DbTagUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DbTagUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dtu *DbTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dbtag.Table, dbtag.Columns, sqlgraph.NewFieldSpec(dbtag.FieldID, field.TypeUUID))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.Name(); ok {
		_spec.SetField(dbtag.FieldName, field.TypeString, value)
	}
	if dtu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbtag.LinksTable,
			Columns: dbtag.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.RemovedLinksIDs(); len(nodes) > 0 && !dtu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbtag.LinksTable,
			Columns: dbtag.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbtag.LinksTable,
			Columns: dbtag.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DbTagUpdateOne is the builder for updating a single DbTag entity.
type DbTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbTagMutation
}

// SetName sets the "name" field.
func (dtuo *DbTagUpdateOne) SetName(s string) *DbTagUpdateOne {
	dtuo.mutation.SetName(s)
	return dtuo
}

// AddLinkIDs adds the "links" edge to the DbLink entity by IDs.
func (dtuo *DbTagUpdateOne) AddLinkIDs(ids ...uuid.UUID) *DbTagUpdateOne {
	dtuo.mutation.AddLinkIDs(ids...)
	return dtuo
}

// AddLinks adds the "links" edges to the DbLink entity.
func (dtuo *DbTagUpdateOne) AddLinks(d ...*DbLink) *DbTagUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtuo.AddLinkIDs(ids...)
}

// Mutation returns the DbTagMutation object of the builder.
func (dtuo *DbTagUpdateOne) Mutation() *DbTagMutation {
	return dtuo.mutation
}

// ClearLinks clears all "links" edges to the DbLink entity.
func (dtuo *DbTagUpdateOne) ClearLinks() *DbTagUpdateOne {
	dtuo.mutation.ClearLinks()
	return dtuo
}

// RemoveLinkIDs removes the "links" edge to DbLink entities by IDs.
func (dtuo *DbTagUpdateOne) RemoveLinkIDs(ids ...uuid.UUID) *DbTagUpdateOne {
	dtuo.mutation.RemoveLinkIDs(ids...)
	return dtuo
}

// RemoveLinks removes "links" edges to DbLink entities.
func (dtuo *DbTagUpdateOne) RemoveLinks(d ...*DbLink) *DbTagUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtuo.RemoveLinkIDs(ids...)
}

// Where appends a list predicates to the DbTagUpdate builder.
func (dtuo *DbTagUpdateOne) Where(ps ...predicate.DbTag) *DbTagUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DbTagUpdateOne) Select(field string, fields ...string) *DbTagUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DbTag entity.
func (dtuo *DbTagUpdateOne) Save(ctx context.Context) (*DbTag, error) {
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DbTagUpdateOne) SaveX(ctx context.Context) *DbTag {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DbTagUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DbTagUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dtuo *DbTagUpdateOne) sqlSave(ctx context.Context) (_node *DbTag, err error) {
	_spec := sqlgraph.NewUpdateSpec(dbtag.Table, dbtag.Columns, sqlgraph.NewFieldSpec(dbtag.FieldID, field.TypeUUID))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbtag.FieldID)
		for _, f := range fields {
			if !dbtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.Name(); ok {
		_spec.SetField(dbtag.FieldName, field.TypeString, value)
	}
	if dtuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbtag.LinksTable,
			Columns: dbtag.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !dtuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbtag.LinksTable,
			Columns: dbtag.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbtag.LinksTable,
			Columns: dbtag.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DbTag{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
