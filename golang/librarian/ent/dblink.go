// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pastureen/librarian/ent/dblink"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DbLink is the model entity for the DbLink schema.
type DbLink struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// ImageAlt holds the value of the "image_alt" field.
	ImageAlt string `json:"image_alt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbLinkQuery when eager-loading is set.
	Edges        DbLinkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DbLinkEdges holds the relations/edges for other nodes in the graph.
type DbLinkEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*DbTag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e DbLinkEdges) TagsOrErr() ([]*DbTag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dblink.FieldID, dblink.FieldTitle, dblink.FieldSubtitle, dblink.FieldDescription, dblink.FieldImageURL, dblink.FieldImageAlt:
			values[i] = new(sql.NullString)
		case dblink.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbLink fields.
func (dl *DbLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dblink.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dl.ID = value.String
			}
		case dblink.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				dl.Title = value.String
			}
		case dblink.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				dl.Date = value.Time
			}
		case dblink.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				dl.Subtitle = value.String
			}
		case dblink.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dl.Description = value.String
			}
		case dblink.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				dl.ImageURL = value.String
			}
		case dblink.FieldImageAlt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_alt", values[i])
			} else if value.Valid {
				dl.ImageAlt = value.String
			}
		default:
			dl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DbLink.
// This includes values selected through modifiers, order, etc.
func (dl *DbLink) Value(name string) (ent.Value, error) {
	return dl.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the DbLink entity.
func (dl *DbLink) QueryTags() *DbTagQuery {
	return NewDbLinkClient(dl.config).QueryTags(dl)
}

// Update returns a builder for updating this DbLink.
// Note that you need to call DbLink.Unwrap() before calling this method if this DbLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (dl *DbLink) Update() *DbLinkUpdateOne {
	return NewDbLinkClient(dl.config).UpdateOne(dl)
}

// Unwrap unwraps the DbLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dl *DbLink) Unwrap() *DbLink {
	_tx, ok := dl.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbLink is not a transactional entity")
	}
	dl.config.driver = _tx.drv
	return dl
}

// String implements the fmt.Stringer.
func (dl *DbLink) String() string {
	var builder strings.Builder
	builder.WriteString("DbLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dl.ID))
	builder.WriteString("title=")
	builder.WriteString(dl.Title)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(dl.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("subtitle=")
	builder.WriteString(dl.Subtitle)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dl.Description)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(dl.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("image_alt=")
	builder.WriteString(dl.ImageAlt)
	builder.WriteByte(')')
	return builder.String()
}

// DbLinks is a parsable slice of DbLink.
type DbLinks []*DbLink
