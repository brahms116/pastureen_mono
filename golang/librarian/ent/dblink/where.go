// Code generated by ent, DO NOT EDIT.

package dblink

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/brahms116/pastureen_mono/golang/librarian/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContainsFold(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldTitle, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldDate, v))
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldSubtitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldDescription, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldImageURL, v))
}

// ImageAlt applies equality check predicate on the "image_alt" field. It's identical to ImageAltEQ.
func ImageAlt(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldImageAlt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContainsFold(FieldTitle, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldDate, v))
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldSubtitle, v))
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldSubtitle, v))
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldSubtitle, vs...))
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldSubtitle, vs...))
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldSubtitle, v))
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldSubtitle, v))
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldSubtitle, v))
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldSubtitle, v))
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContains(FieldSubtitle, v))
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasPrefix(FieldSubtitle, v))
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasSuffix(FieldSubtitle, v))
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEqualFold(FieldSubtitle, v))
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContainsFold(FieldSubtitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContainsFold(FieldDescription, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.DbLink {
	return predicate.DbLink(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.DbLink {
	return predicate.DbLink(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContainsFold(FieldImageURL, v))
}

// ImageAltEQ applies the EQ predicate on the "image_alt" field.
func ImageAltEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEQ(FieldImageAlt, v))
}

// ImageAltNEQ applies the NEQ predicate on the "image_alt" field.
func ImageAltNEQ(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNEQ(FieldImageAlt, v))
}

// ImageAltIn applies the In predicate on the "image_alt" field.
func ImageAltIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldIn(FieldImageAlt, vs...))
}

// ImageAltNotIn applies the NotIn predicate on the "image_alt" field.
func ImageAltNotIn(vs ...string) predicate.DbLink {
	return predicate.DbLink(sql.FieldNotIn(FieldImageAlt, vs...))
}

// ImageAltGT applies the GT predicate on the "image_alt" field.
func ImageAltGT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGT(FieldImageAlt, v))
}

// ImageAltGTE applies the GTE predicate on the "image_alt" field.
func ImageAltGTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldGTE(FieldImageAlt, v))
}

// ImageAltLT applies the LT predicate on the "image_alt" field.
func ImageAltLT(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLT(FieldImageAlt, v))
}

// ImageAltLTE applies the LTE predicate on the "image_alt" field.
func ImageAltLTE(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldLTE(FieldImageAlt, v))
}

// ImageAltContains applies the Contains predicate on the "image_alt" field.
func ImageAltContains(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContains(FieldImageAlt, v))
}

// ImageAltHasPrefix applies the HasPrefix predicate on the "image_alt" field.
func ImageAltHasPrefix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasPrefix(FieldImageAlt, v))
}

// ImageAltHasSuffix applies the HasSuffix predicate on the "image_alt" field.
func ImageAltHasSuffix(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldHasSuffix(FieldImageAlt, v))
}

// ImageAltIsNil applies the IsNil predicate on the "image_alt" field.
func ImageAltIsNil() predicate.DbLink {
	return predicate.DbLink(sql.FieldIsNull(FieldImageAlt))
}

// ImageAltNotNil applies the NotNil predicate on the "image_alt" field.
func ImageAltNotNil() predicate.DbLink {
	return predicate.DbLink(sql.FieldNotNull(FieldImageAlt))
}

// ImageAltEqualFold applies the EqualFold predicate on the "image_alt" field.
func ImageAltEqualFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldEqualFold(FieldImageAlt, v))
}

// ImageAltContainsFold applies the ContainsFold predicate on the "image_alt" field.
func ImageAltContainsFold(v string) predicate.DbLink {
	return predicate.DbLink(sql.FieldContainsFold(FieldImageAlt, v))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.DbLink {
	return predicate.DbLink(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.DbTag) predicate.DbLink {
	return predicate.DbLink(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DbLink) predicate.DbLink {
	return predicate.DbLink(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DbLink) predicate.DbLink {
	return predicate.DbLink(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DbLink) predicate.DbLink {
	return predicate.DbLink(sql.NotPredicates(p))
}
