// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"pastureen/librarian/ent/dblink"
	"pastureen/librarian/ent/dbtag"
	"pastureen/librarian/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DbLinkQuery is the builder for querying DbLink entities.
type DbLinkQuery struct {
	config
	ctx        *QueryContext
	order      []dblink.OrderOption
	inters     []Interceptor
	predicates []predicate.DbLink
	withTags   *DbTagQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DbLinkQuery builder.
func (dlq *DbLinkQuery) Where(ps ...predicate.DbLink) *DbLinkQuery {
	dlq.predicates = append(dlq.predicates, ps...)
	return dlq
}

// Limit the number of records to be returned by this query.
func (dlq *DbLinkQuery) Limit(limit int) *DbLinkQuery {
	dlq.ctx.Limit = &limit
	return dlq
}

// Offset to start from.
func (dlq *DbLinkQuery) Offset(offset int) *DbLinkQuery {
	dlq.ctx.Offset = &offset
	return dlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dlq *DbLinkQuery) Unique(unique bool) *DbLinkQuery {
	dlq.ctx.Unique = &unique
	return dlq
}

// Order specifies how the records should be ordered.
func (dlq *DbLinkQuery) Order(o ...dblink.OrderOption) *DbLinkQuery {
	dlq.order = append(dlq.order, o...)
	return dlq
}

// QueryTags chains the current query on the "tags" edge.
func (dlq *DbLinkQuery) QueryTags() *DbTagQuery {
	query := (&DbTagClient{config: dlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dblink.Table, dblink.FieldID, selector),
			sqlgraph.To(dbtag.Table, dbtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dblink.TagsTable, dblink.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DbLink entity from the query.
// Returns a *NotFoundError when no DbLink was found.
func (dlq *DbLinkQuery) First(ctx context.Context) (*DbLink, error) {
	nodes, err := dlq.Limit(1).All(setContextOp(ctx, dlq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dblink.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dlq *DbLinkQuery) FirstX(ctx context.Context) *DbLink {
	node, err := dlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DbLink ID from the query.
// Returns a *NotFoundError when no DbLink ID was found.
func (dlq *DbLinkQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dlq.Limit(1).IDs(setContextOp(ctx, dlq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dblink.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dlq *DbLinkQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DbLink entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DbLink entity is found.
// Returns a *NotFoundError when no DbLink entities are found.
func (dlq *DbLinkQuery) Only(ctx context.Context) (*DbLink, error) {
	nodes, err := dlq.Limit(2).All(setContextOp(ctx, dlq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dblink.Label}
	default:
		return nil, &NotSingularError{dblink.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dlq *DbLinkQuery) OnlyX(ctx context.Context) *DbLink {
	node, err := dlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DbLink ID in the query.
// Returns a *NotSingularError when more than one DbLink ID is found.
// Returns a *NotFoundError when no entities are found.
func (dlq *DbLinkQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dlq.Limit(2).IDs(setContextOp(ctx, dlq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dblink.Label}
	default:
		err = &NotSingularError{dblink.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dlq *DbLinkQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DbLinks.
func (dlq *DbLinkQuery) All(ctx context.Context) ([]*DbLink, error) {
	ctx = setContextOp(ctx, dlq.ctx, "All")
	if err := dlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DbLink, *DbLinkQuery]()
	return withInterceptors[[]*DbLink](ctx, dlq, qr, dlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dlq *DbLinkQuery) AllX(ctx context.Context) []*DbLink {
	nodes, err := dlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DbLink IDs.
func (dlq *DbLinkQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dlq.ctx.Unique == nil && dlq.path != nil {
		dlq.Unique(true)
	}
	ctx = setContextOp(ctx, dlq.ctx, "IDs")
	if err = dlq.Select(dblink.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dlq *DbLinkQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dlq *DbLinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dlq.ctx, "Count")
	if err := dlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dlq, querierCount[*DbLinkQuery](), dlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dlq *DbLinkQuery) CountX(ctx context.Context) int {
	count, err := dlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dlq *DbLinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dlq.ctx, "Exist")
	switch _, err := dlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dlq *DbLinkQuery) ExistX(ctx context.Context) bool {
	exist, err := dlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DbLinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dlq *DbLinkQuery) Clone() *DbLinkQuery {
	if dlq == nil {
		return nil
	}
	return &DbLinkQuery{
		config:     dlq.config,
		ctx:        dlq.ctx.Clone(),
		order:      append([]dblink.OrderOption{}, dlq.order...),
		inters:     append([]Interceptor{}, dlq.inters...),
		predicates: append([]predicate.DbLink{}, dlq.predicates...),
		withTags:   dlq.withTags.Clone(),
		// clone intermediate query.
		sql:  dlq.sql.Clone(),
		path: dlq.path,
	}
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (dlq *DbLinkQuery) WithTags(opts ...func(*DbTagQuery)) *DbLinkQuery {
	query := (&DbTagClient{config: dlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dlq.withTags = query
	return dlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DbLink.Query().
//		GroupBy(dblink.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dlq *DbLinkQuery) GroupBy(field string, fields ...string) *DbLinkGroupBy {
	dlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DbLinkGroupBy{build: dlq}
	grbuild.flds = &dlq.ctx.Fields
	grbuild.label = dblink.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.DbLink.Query().
//		Select(dblink.FieldTitle).
//		Scan(ctx, &v)
func (dlq *DbLinkQuery) Select(fields ...string) *DbLinkSelect {
	dlq.ctx.Fields = append(dlq.ctx.Fields, fields...)
	sbuild := &DbLinkSelect{DbLinkQuery: dlq}
	sbuild.label = dblink.Label
	sbuild.flds, sbuild.scan = &dlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DbLinkSelect configured with the given aggregations.
func (dlq *DbLinkQuery) Aggregate(fns ...AggregateFunc) *DbLinkSelect {
	return dlq.Select().Aggregate(fns...)
}

func (dlq *DbLinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dlq); err != nil {
				return err
			}
		}
	}
	for _, f := range dlq.ctx.Fields {
		if !dblink.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dlq.path != nil {
		prev, err := dlq.path(ctx)
		if err != nil {
			return err
		}
		dlq.sql = prev
	}
	return nil
}

func (dlq *DbLinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DbLink, error) {
	var (
		nodes       = []*DbLink{}
		_spec       = dlq.querySpec()
		loadedTypes = [1]bool{
			dlq.withTags != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DbLink).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DbLink{config: dlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dlq.withTags; query != nil {
		if err := dlq.loadTags(ctx, query, nodes,
			func(n *DbLink) { n.Edges.Tags = []*DbTag{} },
			func(n *DbLink, e *DbTag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dlq *DbLinkQuery) loadTags(ctx context.Context, query *DbTagQuery, nodes []*DbLink, init func(*DbLink), assign func(*DbLink, *DbTag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DbLink)
	nids := make(map[uuid.UUID]map[*DbLink]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(dblink.TagsTable)
		s.Join(joinT).On(s.C(dbtag.FieldID), joinT.C(dblink.TagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(dblink.TagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(dblink.TagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DbLink]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DbTag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (dlq *DbLinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dlq.querySpec()
	_spec.Node.Columns = dlq.ctx.Fields
	if len(dlq.ctx.Fields) > 0 {
		_spec.Unique = dlq.ctx.Unique != nil && *dlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dlq.driver, _spec)
}

func (dlq *DbLinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(dblink.Table, dblink.Columns, sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeUUID))
	_spec.From = dlq.sql
	if unique := dlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dlq.path != nil {
		_spec.Unique = true
	}
	if fields := dlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dblink.FieldID)
		for i := range fields {
			if fields[i] != dblink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dlq *DbLinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dlq.driver.Dialect())
	t1 := builder.Table(dblink.Table)
	columns := dlq.ctx.Fields
	if len(columns) == 0 {
		columns = dblink.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dlq.sql != nil {
		selector = dlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dlq.ctx.Unique != nil && *dlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dlq.predicates {
		p(selector)
	}
	for _, p := range dlq.order {
		p(selector)
	}
	if offset := dlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DbLinkGroupBy is the group-by builder for DbLink entities.
type DbLinkGroupBy struct {
	selector
	build *DbLinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dlgb *DbLinkGroupBy) Aggregate(fns ...AggregateFunc) *DbLinkGroupBy {
	dlgb.fns = append(dlgb.fns, fns...)
	return dlgb
}

// Scan applies the selector query and scans the result into the given value.
func (dlgb *DbLinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dlgb.build.ctx, "GroupBy")
	if err := dlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DbLinkQuery, *DbLinkGroupBy](ctx, dlgb.build, dlgb, dlgb.build.inters, v)
}

func (dlgb *DbLinkGroupBy) sqlScan(ctx context.Context, root *DbLinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dlgb.fns))
	for _, fn := range dlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dlgb.flds)+len(dlgb.fns))
		for _, f := range *dlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DbLinkSelect is the builder for selecting fields of DbLink entities.
type DbLinkSelect struct {
	*DbLinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dls *DbLinkSelect) Aggregate(fns ...AggregateFunc) *DbLinkSelect {
	dls.fns = append(dls.fns, fns...)
	return dls
}

// Scan applies the selector query and scans the result into the given value.
func (dls *DbLinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dls.ctx, "Select")
	if err := dls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DbLinkQuery, *DbLinkSelect](ctx, dls.DbLinkQuery, dls, dls.inters, v)
}

func (dls *DbLinkSelect) sqlScan(ctx context.Context, root *DbLinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dls.fns))
	for _, fn := range dls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
