// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/brahms116/pastureen_mono/golang/librarian/ent/dblink"
	"github.com/brahms116/pastureen_mono/golang/librarian/ent/dbtag"
)

// DbLinkCreate is the builder for creating a DbLink entity.
type DbLinkCreate struct {
	config
	mutation *DbLinkMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (dlc *DbLinkCreate) SetTitle(s string) *DbLinkCreate {
	dlc.mutation.SetTitle(s)
	return dlc
}

// SetDate sets the "date" field.
func (dlc *DbLinkCreate) SetDate(t time.Time) *DbLinkCreate {
	dlc.mutation.SetDate(t)
	return dlc
}

// SetSubtitle sets the "subtitle" field.
func (dlc *DbLinkCreate) SetSubtitle(s string) *DbLinkCreate {
	dlc.mutation.SetSubtitle(s)
	return dlc
}

// SetDescription sets the "description" field.
func (dlc *DbLinkCreate) SetDescription(s string) *DbLinkCreate {
	dlc.mutation.SetDescription(s)
	return dlc
}

// SetImageURL sets the "image_url" field.
func (dlc *DbLinkCreate) SetImageURL(s string) *DbLinkCreate {
	dlc.mutation.SetImageURL(s)
	return dlc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (dlc *DbLinkCreate) SetNillableImageURL(s *string) *DbLinkCreate {
	if s != nil {
		dlc.SetImageURL(*s)
	}
	return dlc
}

// SetImageAlt sets the "image_alt" field.
func (dlc *DbLinkCreate) SetImageAlt(s string) *DbLinkCreate {
	dlc.mutation.SetImageAlt(s)
	return dlc
}

// SetNillableImageAlt sets the "image_alt" field if the given value is not nil.
func (dlc *DbLinkCreate) SetNillableImageAlt(s *string) *DbLinkCreate {
	if s != nil {
		dlc.SetImageAlt(*s)
	}
	return dlc
}

// SetID sets the "id" field.
func (dlc *DbLinkCreate) SetID(s string) *DbLinkCreate {
	dlc.mutation.SetID(s)
	return dlc
}

// AddTagIDs adds the "tags" edge to the DbTag entity by IDs.
func (dlc *DbLinkCreate) AddTagIDs(ids ...string) *DbLinkCreate {
	dlc.mutation.AddTagIDs(ids...)
	return dlc
}

// AddTags adds the "tags" edges to the DbTag entity.
func (dlc *DbLinkCreate) AddTags(d ...*DbTag) *DbLinkCreate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dlc.AddTagIDs(ids...)
}

// Mutation returns the DbLinkMutation object of the builder.
func (dlc *DbLinkCreate) Mutation() *DbLinkMutation {
	return dlc.mutation
}

// Save creates the DbLink in the database.
func (dlc *DbLinkCreate) Save(ctx context.Context) (*DbLink, error) {
	return withHooks(ctx, dlc.sqlSave, dlc.mutation, dlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dlc *DbLinkCreate) SaveX(ctx context.Context) *DbLink {
	v, err := dlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlc *DbLinkCreate) Exec(ctx context.Context) error {
	_, err := dlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlc *DbLinkCreate) ExecX(ctx context.Context) {
	if err := dlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dlc *DbLinkCreate) check() error {
	if _, ok := dlc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "DbLink.title"`)}
	}
	if _, ok := dlc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "DbLink.date"`)}
	}
	if _, ok := dlc.mutation.Subtitle(); !ok {
		return &ValidationError{Name: "subtitle", err: errors.New(`ent: missing required field "DbLink.subtitle"`)}
	}
	if _, ok := dlc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "DbLink.description"`)}
	}
	return nil
}

func (dlc *DbLinkCreate) sqlSave(ctx context.Context) (*DbLink, error) {
	if err := dlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DbLink.ID type: %T", _spec.ID.Value)
		}
	}
	dlc.mutation.id = &_node.ID
	dlc.mutation.done = true
	return _node, nil
}

func (dlc *DbLinkCreate) createSpec() (*DbLink, *sqlgraph.CreateSpec) {
	var (
		_node = &DbLink{config: dlc.config}
		_spec = sqlgraph.NewCreateSpec(dblink.Table, sqlgraph.NewFieldSpec(dblink.FieldID, field.TypeString))
	)
	if id, ok := dlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dlc.mutation.Title(); ok {
		_spec.SetField(dblink.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dlc.mutation.Date(); ok {
		_spec.SetField(dblink.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := dlc.mutation.Subtitle(); ok {
		_spec.SetField(dblink.FieldSubtitle, field.TypeString, value)
		_node.Subtitle = value
	}
	if value, ok := dlc.mutation.Description(); ok {
		_spec.SetField(dblink.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dlc.mutation.ImageURL(); ok {
		_spec.SetField(dblink.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := dlc.mutation.ImageAlt(); ok {
		_spec.SetField(dblink.FieldImageAlt, field.TypeString, value)
		_node.ImageAlt = value
	}
	if nodes := dlc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dblink.TagsTable,
			Columns: dblink.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbtag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DbLinkCreateBulk is the builder for creating many DbLink entities in bulk.
type DbLinkCreateBulk struct {
	config
	err      error
	builders []*DbLinkCreate
}

// Save creates the DbLink entities in the database.
func (dlcb *DbLinkCreateBulk) Save(ctx context.Context) ([]*DbLink, error) {
	if dlcb.err != nil {
		return nil, dlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dlcb.builders))
	nodes := make([]*DbLink, len(dlcb.builders))
	mutators := make([]Mutator, len(dlcb.builders))
	for i := range dlcb.builders {
		func(i int, root context.Context) {
			builder := dlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DbLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dlcb *DbLinkCreateBulk) SaveX(ctx context.Context) []*DbLink {
	v, err := dlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlcb *DbLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := dlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlcb *DbLinkCreateBulk) ExecX(ctx context.Context) {
	if err := dlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
